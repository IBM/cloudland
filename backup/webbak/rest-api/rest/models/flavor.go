// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Flavor flavor
// swagger:model flavor
type Flavor struct {

	// o s f l v e x t d a t a ephemeral
	OSFLVEXTDATAEphemeral int64 `json:"OS-FLV-EXT-DATA:ephemeral,omitempty"`

	// description
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Description string `json:"description,omitempty"`

	// disk
	Disk int32 `json:"disk,omitempty"`

	// id
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	ID string `json:"id,omitempty"`

	// links
	Links Links `json:"links,omitempty"`

	// name
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`

	// os flavor access is public
	OsFlavorAccessIsPublic bool `json:"os-flavor-access:is_public,omitempty"`

	// ram
	RAM int32 `json:"ram,omitempty"`

	// rxtx factor
	RxtxFactor float32 `json:"rxtx_factor,omitempty"`

	// swap
	Swap int32 `json:"swap,omitempty"`

	// vcpus
	Vcpus int32 `json:"vcpus,omitempty"`
}

// Validate validates this flavor
func (m *Flavor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Flavor) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.Pattern("description", "body", string(m.Description), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

func (m *Flavor) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.Pattern("id", "body", string(m.ID), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

func (m *Flavor) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if err := m.Links.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("links")
		}
		return err
	}

	return nil
}

func (m *Flavor) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", string(m.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Flavor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Flavor) UnmarshalBinary(b []byte) error {
	var res Flavor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
