// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostIdentityV3AuthTokensParamsBodyAuthIdentity post identity v3 auth tokens params body auth identity
// swagger:model postIdentityV3AuthTokensParamsBodyAuthIdentity
type PostIdentityV3AuthTokensParamsBodyAuthIdentity struct {

	// methods
	Methods []string `json:"methods"`

	// password
	Password *PostIdentityV3AuthTokensParamsBodyAuthIdentityPassword `json:"password,omitempty"`
}

// Validate validates this post identity v3 auth tokens params body auth identity
func (m *PostIdentityV3AuthTokensParamsBodyAuthIdentity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMethods(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var postIdentityV3AuthTokensParamsBodyAuthIdentityMethodsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["password"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postIdentityV3AuthTokensParamsBodyAuthIdentityMethodsItemsEnum = append(postIdentityV3AuthTokensParamsBodyAuthIdentityMethodsItemsEnum, v)
	}
}

func (m *PostIdentityV3AuthTokensParamsBodyAuthIdentity) validateMethodsItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, postIdentityV3AuthTokensParamsBodyAuthIdentityMethodsItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *PostIdentityV3AuthTokensParamsBodyAuthIdentity) validateMethods(formats strfmt.Registry) error {

	if swag.IsZero(m.Methods) { // not required
		return nil
	}

	for i := 0; i < len(m.Methods); i++ {

		// value enum
		if err := m.validateMethodsItemsEnum("methods"+"."+strconv.Itoa(i), "body", m.Methods[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *PostIdentityV3AuthTokensParamsBodyAuthIdentity) validatePassword(formats strfmt.Registry) error {

	if swag.IsZero(m.Password) { // not required
		return nil
	}

	if m.Password != nil {
		if err := m.Password.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("password")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostIdentityV3AuthTokensParamsBodyAuthIdentity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostIdentityV3AuthTokensParamsBodyAuthIdentity) UnmarshalBinary(b []byte) error {
	var res PostIdentityV3AuthTokensParamsBodyAuthIdentity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
