- name: install common packages
  apt:
    name: ['jq', 'wget', 'mkisofs', 'network-manager', 'net-tools', 'python3-pip']
    update_cache: yes
    state: present
  ignore_errors: yes
  tags: [be_pkg]

- name: install packages for kvm
  apt:
    name: ['qemu-system-x86', 'qemu-utils', 'bridge-utils', 'ipcalc', 'ipset', 'keepalived', 'iputils-arping', 'libvirt-daemon', 'libvirt-daemon-system', 'libvirt-daemon-system-systemd', 'libvirt-clients', 'dnsmasq', 'dnsmasq-utils', 'conntrack']
    state: present
  ignore_errors: yes
  tags: [be_pkg]

- pip:
    name: pyparsing
    executable: pip3
  ignore_errors: yes
  tags: [be_pkg]

- name: creates cloudland directory
  file:
    path: "{{ item }}"
    state: directory
    owner: cland
    group: cland
  with_items:
    - /opt/cloudland
    - /opt/cloudland/log
    - /opt/cloudland/run
    - /opt/cloudland/cache
    - /opt/cloudland/cache/backup
    - /opt/cloudland/cache/image
    - /opt/cloudland/cache/instance
    - /opt/cloudland/cache/meta
    - /opt/cloudland/cache/router
    - /opt/cloudland/cache/volume
    - /opt/cloudland/cache/dnsmasq
    - /opt/cloudland/cache/xml
    - /opt/cloudland/cache/qemu_agent
  tags: [sync]

- name: create sysconfig directory
  file:
    path: "/etc/sysconfig"
    state: directory
    owner: root
    group: root
  tags: [be_srv, cloudlet]

- name: copy sci binaries
  copy: 
    src: /opt/sci
    dest: /opt
    mode: preserve
  tags: [sci]
  when: inventory_hostname != ansible_hostname

- name: copy sci service file
  copy: 
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: preserve
  with_items:
    - {src: 'scid.service', dest: '/lib/systemd/system', owner: 'root'}
  tags: [be_srv, sci]

- name: copy scripts
  synchronize:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - { src: "/opt/cloudland/scripts", dest: "/opt/cloudland", owner: 'cland', group: 'cland' }
  tags: [sync, scripts, scripts_only]
  when: inventory_hostname != ansible_hostname

- name: link backend to kvm
  file:
    src: /opt/cloudland/scripts/kvm
    dest: /opt/cloudland/scripts/backend
    state: link
    force: yes
    owner: 'cland'
    group: 'cland'
  tags: [be_conf, scripts, scripts_only]

- name: register network_device
  script: get_netdev.sh "{{ hostvars[inventory_hostname]['ansible_env'].SSH_CONNECTION.split(' ')[2] }}"
  register: netdev

- name: create cloudrc local file for kvm
  vars:
    network_device: "{{ netdev.stdout_lines[0] }}"
    vxlan_device: "{{ network_device }}"
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ item.owner }}"
    group: "{{ item.owner }}"
  with_items:
    - {src: 'cloudrc.local.kvm-x86_64.j2', dest: '/opt/cloudland/scripts/cloudrc.local', owner: 'cland', group: 'cland'}
  when: virt_type == 'kvm-x86_64'
  tags: [be_conf, scripts]

- name: synchronize cloudlet
  synchronize:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - { src: "/opt/cloudland/bin", dest: "/opt/cloudland", owner: 'cland', group: 'cland' }
  tags: [sync, cloudlet]
  when: inventory_hostname != ansible_hostname

- name: create cloudlet environment file
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ item.owner }}"
  with_items:
    - {src: 'cloudlet.j2', dest: '/etc/sysconfig/cloudlet', owner: 'root'}
  tags: [be_srv, cloudlet]

- name: copy cloudlet service file
  copy: 
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: preserve
  with_items:
    - {src: 'cloudlet.service', dest: '/lib/systemd/system', owner: 'root'}
  tags: [be_srv, cloudlet]
 
- name: copy compute service file
  copy: 
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: preserve
  with_items:
    - {src: 'kvm-nested.conf', dest: '/etc/modprobe.d', owner: 'root'}
  tags: [be_srv]

- name: start scid services
  systemd: 
    name: "{{ item }}"
    enabled: yes
    daemon_reload: yes
    state: restarted
  with_items:
    - 'scid'
  tags: [be_srv, sci, start_sci]

- name: start cloudlet services
  systemd: 
    name: "{{ item }}"
    enabled: yes
    daemon_reload: yes
    state: restarted
  with_items:
    - 'cloudlet'
  tags: [be_srv, cloudlet]

- name: set compute libvirt service
  systemd: 
    name: "{{ item }}"
    enabled: yes
    daemon_reload: yes
    state: restarted
  with_items:
    - 'libvirtd'
  tags: [be_srv]

- name: undefine default libvirt network
  command: bash -c "virsh net-destroy default; virsh net-undefine default" 
  ignore_errors: yes
  tags: [be_srv]

- name: set compute services NetworkManager
  systemd: 
    name: "{{ item }}"
    enabled: true
    state: started
  with_items:
    - 'NetworkManager'
  tags: [be_srv, netplan]

- name: change netplan renderer
  script: change_netplan_renderer.sh
  register: need_to_reboot
  tags: [be_srv, netplan]

- name: reboot compute node if needed
  vars:
    need_reboot: "{{ need_to_reboot.stdout_lines[0] }}"
  ansible.builtin.reboot:
  when: 
    - need_reboot == 'need_to_reboot'
    - inventory_hostname != ansible_hostname
  tags: [netplan]

- name: stop and mask networkd
  systemd:
    name: "{{ item }}"
    enabled: false
    masked: yes
    state: stopped
  with_items:
    - 'systemd-networkd'
  tags: [be_srv, netplan]

- name: allow necessary ports for hypervisor
  script: firewall.sh
  tags: [firewall]
 
- name: Load nr_bridge kernel module
  modprobe:
    name: br_netfilter
    state: present
  tags: [sysctl]

- name: Apply sysctl bridge-nf-call-iptables
  sysctl:
    name: net.bridge.bridge-nf-call-iptables
    state: present
    value: '1'
    reload: yes
  tags: [sysctl]

- name: Apply sysctl bridge-nf-call-arptables
  sysctl:
    name: net.bridge.bridge-nf-call-arptables
    state: present
    value: '1'
    reload: yes
  tags: [sysctl]

- name: Apply sysctl bridge-nf-call-ip6tables
  sysctl:
    name: net.bridge.bridge-nf-call-ip6tables
    state: present
    value: '1'
    reload: yes
  tags: [sysctl]

- name: Apply sysctl net.netfilter.nf_conntrack_max
  sysctl:
    name: net.netfilter.nf_conntrack_max
    state: present
    value: '6553600'
    reload: yes
  tags: [sysctl]

- name: Apply sysctl net.core.rmem_max
  sysctl:
    name: net.core.rmem_max
    state: present
    value: '16777216'
    reload: yes
  tags: [sysctl]

- name: Apply sysctl net.core.wmem_max
  sysctl:
    name: net.core.wmem_max
    state: present
    value: '16777216'
    reload: yes
  tags: [sysctl]

- name: Install Docker SDK for Python
  become: true
  pip:
    name: docker
    executable: pip3
  tags: [monitor]

- name: Check if Docker is running
  become: true
  command: docker info
  register: docker_status
  ignore_errors: yes
  changed_when: false
  tags: [monitor]

- name: Install Docker if not present
  become: true
  apt:
    name: docker.io
    state: present
  when: docker_status.rc != 0
  tags: [monitor]

- name: Start Docker service if not running
  become: true
  systemd:
    name: docker
    state: started
    enabled: yes
  when: docker_status.rc != 0
  tags: [monitor]

- name: Run libvirt-exporter in Docker
  become: true
  docker_container:
    name: prometheus-libvirt-exporter
    image: "kiennt26/prometheus-libvirt-exporter:latest"
    network_mode: host
    volumes:
      - "/:/host:ro,rslave"
      - "/var/run/libvirt:/var/run/libvirt"
    privileged: yes
    restart_policy: always
  tags: [monitor]

- name: Create directory for monitor scripts
  file:
    path: /opt/cloudland/scripts/monitor
    state: directory
    owner: root
    group: root
    mode: '0755'
  tags: [monitor]

- name: Set node exporter port variable
  set_fact:
    node_exporter_port: 9101
  tags: [monitor]

- name: Install prometheus-node-exporter without starting
  become: true
  apt:
    name: prometheus-node-exporter
    state: present
  register: pkg_install
  ignore_errors: yes  # ignore for will chage port number
  tags: [monitor]

- name: Force stop node exporter after install
  become: true
  systemd:
    name: prometheus-node-exporter
    state: stopped
  ignore_errors: yes
  changed_when: false
  when: pkg_install is succeeded
  tags: [monitor]

- name: Ensure systemd override directory exists
  file:
    path: /etc/systemd/system/prometheus-node-exporter.service.d
    state: directory
    owner: root
    group: root
    mode: '0755'
  tags: [monitor]

- name: Configure Node Exporter with textfile directory
  become: true
  copy:
    dest: /etc/systemd/system/prometheus-node-exporter.service.d/override.conf
    content: |
      [Service]
      ExecStart=
      ExecStart=/usr/bin/prometheus-node-exporter --web.listen-address=:{{ node_exporter_port }} --collector.textfile.directory=/var/lib/node_exporter
    mode: '0644'
    owner: root
    group: root
  tags: [monitor]

- name: Apply systemd configuration changes
  become: true
  systemd:
    daemon_reload: yes
    name: prometheus-node-exporter
  changed_when: false
  tags: [monitor]

- name: Ensure service started with new config is enabled and started
  become: true
  systemd:
    name: prometheus-node-exporter
    enabled: yes
    state: restarted
    daemon_reload: no
  register: service_status
  until: service_status.status.ActiveState == "active"
  retries: 3
  delay: 5
  tags: [monitor]
