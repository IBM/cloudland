// Code generated by go-swagger; DO NOT EDIT.

package keystone

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/IBM/cloudland/web/rest-api/rest/models"
)

// GetIdentityReader is a Reader for the GetIdentity structure.
type GetIdentityReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIdentityReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 300:
		result := NewGetIdentityMultipleChoices()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetIdentityMultipleChoices creates a GetIdentityMultipleChoices with default headers values
func NewGetIdentityMultipleChoices() *GetIdentityMultipleChoices {
	return &GetIdentityMultipleChoices{
		Vary: "X-Auth-Token",
	}
}

/*GetIdentityMultipleChoices handles this case with default header values.

redirect connection
*/
type GetIdentityMultipleChoices struct {
	/*X-Auth-Token
	 */
	Vary string
	/*request-id
	 */
	XOpenstackRequestID string

	Payload *models.GetIdentityMultipleChoicesBody
}

func (o *GetIdentityMultipleChoices) Error() string {
	return fmt.Sprintf("[GET /identity][%d] getIdentityMultipleChoices  %+v", 300, o.Payload)
}

func (o *GetIdentityMultipleChoices) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Vary
	o.Vary = response.GetHeader("Vary")

	// response header x-openstack-request-id
	o.XOpenstackRequestID = response.GetHeader("x-openstack-request-id")

	o.Payload = new(models.GetIdentityMultipleChoicesBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
