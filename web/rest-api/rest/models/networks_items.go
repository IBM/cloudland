// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetworksItems networks items
// swagger:model networksItems
type NetworksItems struct {

	// admin state up
	AdminStateUp bool `json:"admin_state_up,omitempty"`

	// availability zone hints
	AvailabilityZoneHints []string `json:"availability_zone_hints"`

	// availability zones
	AvailabilityZones []string `json:"availability_zones"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// description
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Description string `json:"description,omitempty"`

	// dns domain
	DNSDomain string `json:"dns_domain,omitempty"`

	// id
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	ID string `json:"id,omitempty"`

	// ipv4 address scope
	IPV4AddressScope string `json:"ipv4_address_scope,omitempty"`

	// ipv6 address scope
	IPV6AddressScope string `json:"ipv6_address_scope,omitempty"`

	// is default
	IsDefault bool `json:"is_default,omitempty"`

	// l2 adjacency
	L2Adjacency bool `json:"l2_adjacency,omitempty"`

	// mtu
	Mtu int64 `json:"mtu,omitempty"`

	// name
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	// Enum: [stable]
	Name string `json:"name,omitempty"`

	// port security enabled
	PortSecurityEnabled bool `json:"port_security_enabled,omitempty"`

	// project id
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	ProjectID string `json:"project_id,omitempty"`

	// provider network type
	// Enum: [vlan vxlan gre flat]
	ProviderNetworkType string `json:"provider:network_type,omitempty"`

	// provider segmentation id
	// Maximum: 1.6777215e+07
	// Minimum: 0
	ProviderSegmentationID *int64 `json:"provider:segmentation_id,omitempty"`

	// qos policy id
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	QosPolicyID string `json:"qos_policy_id,omitempty"`

	// revision number
	RevisionNumber int64 `json:"revision_number,omitempty"`

	// router external
	RouterExternal bool `json:"router:external,omitempty"`

	// shared
	Shared bool `json:"shared,omitempty"`

	// status
	// Enum: [ACTIVE DISABLE]
	Status string `json:"status,omitempty"`

	// subnets
	Subnets []string `json:"subnets"`

	// tenant id
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	TenantID string `json:"tenant_id,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// vlan transparent
	VlanTransparent bool `json:"vlan_transparent,omitempty"`
}

// Validate validates this networks items
func (m *NetworksItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProviderNetworkType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProviderSegmentationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQosPolicyID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworksItems) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NetworksItems) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.Pattern("description", "body", string(m.Description), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

func (m *NetworksItems) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.Pattern("id", "body", string(m.ID), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

var networksItemsTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["stable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networksItemsTypeNamePropEnum = append(networksItemsTypeNamePropEnum, v)
	}
}

const (

	// NetworksItemsNameStable captures enum value "stable"
	NetworksItemsNameStable string = "stable"
)

// prop value enum
func (m *NetworksItems) validateNameEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, networksItemsTypeNamePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NetworksItems) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", string(m.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	// value enum
	if err := m.validateNameEnum("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *NetworksItems) validateProjectID(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectID) { // not required
		return nil
	}

	if err := validate.Pattern("project_id", "body", string(m.ProjectID), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

var networksItemsTypeProviderNetworkTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["vlan","vxlan","gre","flat"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networksItemsTypeProviderNetworkTypePropEnum = append(networksItemsTypeProviderNetworkTypePropEnum, v)
	}
}

const (

	// NetworksItemsProviderNetworkTypeVlan captures enum value "vlan"
	NetworksItemsProviderNetworkTypeVlan string = "vlan"

	// NetworksItemsProviderNetworkTypeVxlan captures enum value "vxlan"
	NetworksItemsProviderNetworkTypeVxlan string = "vxlan"

	// NetworksItemsProviderNetworkTypeGre captures enum value "gre"
	NetworksItemsProviderNetworkTypeGre string = "gre"

	// NetworksItemsProviderNetworkTypeFlat captures enum value "flat"
	NetworksItemsProviderNetworkTypeFlat string = "flat"
)

// prop value enum
func (m *NetworksItems) validateProviderNetworkTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, networksItemsTypeProviderNetworkTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NetworksItems) validateProviderNetworkType(formats strfmt.Registry) error {

	if swag.IsZero(m.ProviderNetworkType) { // not required
		return nil
	}

	// value enum
	if err := m.validateProviderNetworkTypeEnum("provider:network_type", "body", m.ProviderNetworkType); err != nil {
		return err
	}

	return nil
}

func (m *NetworksItems) validateProviderSegmentationID(formats strfmt.Registry) error {

	if swag.IsZero(m.ProviderSegmentationID) { // not required
		return nil
	}

	if err := validate.MinimumInt("provider:segmentation_id", "body", int64(*m.ProviderSegmentationID), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("provider:segmentation_id", "body", int64(*m.ProviderSegmentationID), 1.6777215e+07, false); err != nil {
		return err
	}

	return nil
}

func (m *NetworksItems) validateQosPolicyID(formats strfmt.Registry) error {

	if swag.IsZero(m.QosPolicyID) { // not required
		return nil
	}

	if err := validate.Pattern("qos_policy_id", "body", string(m.QosPolicyID), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

var networksItemsTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ACTIVE","DISABLE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networksItemsTypeStatusPropEnum = append(networksItemsTypeStatusPropEnum, v)
	}
}

const (

	// NetworksItemsStatusACTIVE captures enum value "ACTIVE"
	NetworksItemsStatusACTIVE string = "ACTIVE"

	// NetworksItemsStatusDISABLE captures enum value "DISABLE"
	NetworksItemsStatusDISABLE string = "DISABLE"
)

// prop value enum
func (m *NetworksItems) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, networksItemsTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NetworksItems) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *NetworksItems) validateSubnets(formats strfmt.Registry) error {

	if swag.IsZero(m.Subnets) { // not required
		return nil
	}

	for i := 0; i < len(m.Subnets); i++ {

		if err := validate.Pattern("subnets"+"."+strconv.Itoa(i), "body", string(m.Subnets[i]), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
			return err
		}

	}

	return nil
}

func (m *NetworksItems) validateTenantID(formats strfmt.Registry) error {

	if swag.IsZero(m.TenantID) { // not required
		return nil
	}

	if err := validate.Pattern("tenant_id", "body", string(m.TenantID), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

func (m *NetworksItems) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworksItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworksItems) UnmarshalBinary(b []byte) error {
	var res NetworksItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
