// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Subnet subnet
//
// swagger:model subnet
type Subnet struct {

	// allocation pools
	AllocationPools []*SubnetAllocationPoolsItems `json:"allocation_pools"`

	// cidr
	// Example: 10.0.0.1/24
	Cidr string `json:"cidr,omitempty"`

	// created at
	// Example: 2016-03-08T20:19:41
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// description
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Description string `json:"description,omitempty"`

	// dns nameservers
	DNSNameservers []string `json:"dns_nameservers"`

	// dns publish fixed ip
	// Example: true
	DNSPublishFixedIP bool `json:"dns_publish_fixed_ip,omitempty"`

	// enable dhcp
	// Example: true
	EnableDhcp bool `json:"enable_dhcp,omitempty"`

	// gateway ip
	// Example: 10.0.0.1
	// Format: ipv4
	GatewayIP strfmt.IPv4 `json:"gateway_ip,omitempty"`

	// host routes
	HostRoutes []*SubnetHostRoutesItems `json:"host_routes"`

	// id
	// Example: d32019d3-bc6e-4319-9c1d-6722fc136a22
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	ID string `json:"id,omitempty"`

	// ip version
	// Example: 6
	// Enum: [4 6]
	IPVersion int64 `json:"ip_version,omitempty"`

	// ipv6 address mode
	// Enum: [slaac dhcpv6-stateful dhcpv6-stateless null]
	IPV6AddressMode string `json:"ipv6_address_mode,omitempty"`

	// ipv6 ra mode
	// Enum: [slaac dhcpv6-stateful dhcpv6-stateless null]
	IPV6RaMode string `json:"ipv6_ra_mode,omitempty"`

	// name
	// Example: subnet1
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`

	// network id
	// Example: d32019d3-bc6e-4319-9c1d-6722fc136a22
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	NetworkID string `json:"network_id,omitempty"`

	// project id
	// Example: 4fd44f30292945e481c7b8a0c8908869
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	ProjectID string `json:"project_id,omitempty"`

	// revision number
	// Example: 0
	RevisionNumber int64 `json:"revision_number,omitempty"`

	// segment id
	SegmentID string `json:"segment_id,omitempty"`

	// service types
	// Example: []
	ServiceTypes []string `json:"service_types"`

	// subnetpool id
	// Example: d32019d3-bc6e-4319-9c1d-6722fc136a22
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	SubnetpoolID string `json:"subnetpool_id,omitempty"`

	// tenant id
	// Example: 4fd44f30292945e481c7b8a0c8908869
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	TenantID string `json:"tenant_id,omitempty"`

	// updated at
	// Example: 2016-03-08T20:19:41
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`
}

// Validate validates this subnet
func (m *Subnet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllocationPools(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDNSNameservers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGatewayIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostRoutes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPV6AddressMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPV6RaMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnetpoolID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Subnet) validateAllocationPools(formats strfmt.Registry) error {
	if swag.IsZero(m.AllocationPools) { // not required
		return nil
	}

	for i := 0; i < len(m.AllocationPools); i++ {
		if swag.IsZero(m.AllocationPools[i]) { // not required
			continue
		}

		if m.AllocationPools[i] != nil {
			if err := m.AllocationPools[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("allocation_pools" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Subnet) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Subnet) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.Pattern("description", "body", m.Description, `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

func (m *Subnet) validateDNSNameservers(formats strfmt.Registry) error {
	if swag.IsZero(m.DNSNameservers) { // not required
		return nil
	}

	for i := 0; i < len(m.DNSNameservers); i++ {

		if err := validate.Pattern("dns_nameservers"+"."+strconv.Itoa(i), "body", m.DNSNameservers[i], `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
			return err
		}

	}

	return nil
}

func (m *Subnet) validateGatewayIP(formats strfmt.Registry) error {
	if swag.IsZero(m.GatewayIP) { // not required
		return nil
	}

	if err := validate.FormatOf("gateway_ip", "body", "ipv4", m.GatewayIP.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Subnet) validateHostRoutes(formats strfmt.Registry) error {
	if swag.IsZero(m.HostRoutes) { // not required
		return nil
	}

	for i := 0; i < len(m.HostRoutes); i++ {
		if swag.IsZero(m.HostRoutes[i]) { // not required
			continue
		}

		if m.HostRoutes[i] != nil {
			if err := m.HostRoutes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("host_routes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Subnet) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.Pattern("id", "body", m.ID, `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

var subnetTypeIPVersionPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[4,6]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		subnetTypeIPVersionPropEnum = append(subnetTypeIPVersionPropEnum, v)
	}
}

// prop value enum
func (m *Subnet) validateIPVersionEnum(path, location string, value int64) error {
	if err := validate.EnumCase(path, location, value, subnetTypeIPVersionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Subnet) validateIPVersion(formats strfmt.Registry) error {
	if swag.IsZero(m.IPVersion) { // not required
		return nil
	}

	// value enum
	if err := m.validateIPVersionEnum("ip_version", "body", m.IPVersion); err != nil {
		return err
	}

	return nil
}

var subnetTypeIPV6AddressModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["slaac","dhcpv6-stateful","dhcpv6-stateless","null"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		subnetTypeIPV6AddressModePropEnum = append(subnetTypeIPV6AddressModePropEnum, v)
	}
}

const (

	// SubnetIPV6AddressModeSlaac captures enum value "slaac"
	SubnetIPV6AddressModeSlaac string = "slaac"

	// SubnetIPV6AddressModeDhcpv6DashStateful captures enum value "dhcpv6-stateful"
	SubnetIPV6AddressModeDhcpv6DashStateful string = "dhcpv6-stateful"

	// SubnetIPV6AddressModeDhcpv6DashStateless captures enum value "dhcpv6-stateless"
	SubnetIPV6AddressModeDhcpv6DashStateless string = "dhcpv6-stateless"

	// SubnetIPV6AddressModeNull captures enum value "null"
	SubnetIPV6AddressModeNull string = "null"
)

// prop value enum
func (m *Subnet) validateIPV6AddressModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, subnetTypeIPV6AddressModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Subnet) validateIPV6AddressMode(formats strfmt.Registry) error {
	if swag.IsZero(m.IPV6AddressMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateIPV6AddressModeEnum("ipv6_address_mode", "body", m.IPV6AddressMode); err != nil {
		return err
	}

	return nil
}

var subnetTypeIPV6RaModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["slaac","dhcpv6-stateful","dhcpv6-stateless","null"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		subnetTypeIPV6RaModePropEnum = append(subnetTypeIPV6RaModePropEnum, v)
	}
}

const (

	// SubnetIPV6RaModeSlaac captures enum value "slaac"
	SubnetIPV6RaModeSlaac string = "slaac"

	// SubnetIPV6RaModeDhcpv6DashStateful captures enum value "dhcpv6-stateful"
	SubnetIPV6RaModeDhcpv6DashStateful string = "dhcpv6-stateful"

	// SubnetIPV6RaModeDhcpv6DashStateless captures enum value "dhcpv6-stateless"
	SubnetIPV6RaModeDhcpv6DashStateless string = "dhcpv6-stateless"

	// SubnetIPV6RaModeNull captures enum value "null"
	SubnetIPV6RaModeNull string = "null"
)

// prop value enum
func (m *Subnet) validateIPV6RaModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, subnetTypeIPV6RaModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Subnet) validateIPV6RaMode(formats strfmt.Registry) error {
	if swag.IsZero(m.IPV6RaMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateIPV6RaModeEnum("ipv6_ra_mode", "body", m.IPV6RaMode); err != nil {
		return err
	}

	return nil
}

func (m *Subnet) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", m.Name, `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

func (m *Subnet) validateNetworkID(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkID) { // not required
		return nil
	}

	if err := validate.Pattern("network_id", "body", m.NetworkID, `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

func (m *Subnet) validateProjectID(formats strfmt.Registry) error {
	if swag.IsZero(m.ProjectID) { // not required
		return nil
	}

	if err := validate.Pattern("project_id", "body", m.ProjectID, `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

func (m *Subnet) validateSubnetpoolID(formats strfmt.Registry) error {
	if swag.IsZero(m.SubnetpoolID) { // not required
		return nil
	}

	if err := validate.Pattern("subnetpool_id", "body", m.SubnetpoolID, `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

func (m *Subnet) validateTenantID(formats strfmt.Registry) error {
	if swag.IsZero(m.TenantID) { // not required
		return nil
	}

	if err := validate.Pattern("tenant_id", "body", m.TenantID, `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

func (m *Subnet) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this subnet based on the context it is used
func (m *Subnet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAllocationPools(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHostRoutes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Subnet) contextValidateAllocationPools(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AllocationPools); i++ {

		if m.AllocationPools[i] != nil {
			if err := m.AllocationPools[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("allocation_pools" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Subnet) contextValidateHostRoutes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HostRoutes); i++ {

		if m.HostRoutes[i] != nil {
			if err := m.HostRoutes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("host_routes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Subnet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Subnet) UnmarshalBinary(b []byte) error {
	var res Subnet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
