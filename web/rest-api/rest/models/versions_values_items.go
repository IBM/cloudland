// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VersionsValuesItems versions values items
// swagger:model versionsValuesItems
type VersionsValuesItems struct {

	// id
	// Enum: [v3.10]
	ID string `json:"id,omitempty"`

	// links
	Links []*VersionsValuesItemsLinksItems `json:"links"`

	// media types
	MediaTypes []*VersionsValuesItemsMediaTypesItems `json:"media-types"`

	// status
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	// Enum: [stable]
	Status string `json:"status,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated,omitempty"`
}

// Validate validates this versions values items
func (m *VersionsValuesItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMediaTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var versionsValuesItemsTypeIDPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["v3.10"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		versionsValuesItemsTypeIDPropEnum = append(versionsValuesItemsTypeIDPropEnum, v)
	}
}

const (

	// VersionsValuesItemsIDV310 captures enum value "v3.10"
	VersionsValuesItemsIDV310 string = "v3.10"
)

// prop value enum
func (m *VersionsValuesItems) validateIDEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, versionsValuesItemsTypeIDPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VersionsValuesItems) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	// value enum
	if err := m.validateIDEnum("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *VersionsValuesItems) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	for i := 0; i < len(m.Links); i++ {
		if swag.IsZero(m.Links[i]) { // not required
			continue
		}

		if m.Links[i] != nil {
			if err := m.Links[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VersionsValuesItems) validateMediaTypes(formats strfmt.Registry) error {

	if swag.IsZero(m.MediaTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.MediaTypes); i++ {
		if swag.IsZero(m.MediaTypes[i]) { // not required
			continue
		}

		if m.MediaTypes[i] != nil {
			if err := m.MediaTypes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("media-types" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var versionsValuesItemsTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["stable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		versionsValuesItemsTypeStatusPropEnum = append(versionsValuesItemsTypeStatusPropEnum, v)
	}
}

const (

	// VersionsValuesItemsStatusStable captures enum value "stable"
	VersionsValuesItemsStatusStable string = "stable"
)

// prop value enum
func (m *VersionsValuesItems) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, versionsValuesItemsTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VersionsValuesItems) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := validate.Pattern("status", "body", string(m.Status), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *VersionsValuesItems) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(m.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("updated", "body", "date-time", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VersionsValuesItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VersionsValuesItems) UnmarshalBinary(b []byte) error {
	var res VersionsValuesItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
