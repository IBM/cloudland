// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Network network
//
// swagger:model network
type Network struct {

	// admin state up
	// Example: true
	AdminStateUp bool `json:"admin_state_up,omitempty"`

	// availability zone hints
	AvailabilityZoneHints []string `json:"availability_zone_hints"`

	// availability zones
	AvailabilityZones []string `json:"availability_zones"`

	// created at
	// Example: 2016-03-08T20:19:41
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// description
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Description string `json:"description,omitempty"`

	// dns domain
	// Example: my-domain.org.
	DNSDomain string `json:"dns_domain,omitempty"`

	// id
	// Example: d32019d3-bc6e-4319-9c1d-6722fc136a22
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	ID string `json:"id,omitempty"`

	// ipv4 address scope
	IPV4AddressScope string `json:"ipv4_address_scope,omitempty"`

	// ipv6 address scope
	IPV6AddressScope string `json:"ipv6_address_scope,omitempty"`

	// is default
	// Example: false
	IsDefault bool `json:"is_default,omitempty"`

	// l2 adjacency
	// Example: false
	L2Adjacency bool `json:"l2_adjacency,omitempty"`

	// mtu
	// Example: 1500
	Mtu int64 `json:"mtu,omitempty"`

	// name
	// Example: net1
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	// Enum: [stable]
	Name string `json:"name,omitempty"`

	// port security enabled
	// Example: true
	PortSecurityEnabled bool `json:"port_security_enabled,omitempty"`

	// project id
	// Example: 4fd44f30292945e481c7b8a0c8908869
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	ProjectID string `json:"project_id,omitempty"`

	// provider network type
	// Example: vxlan
	// Enum: [vlan vxlan gre flat]
	ProviderNetworkType string `json:"provider:network_type,omitempty"`

	// provider segmentation id
	// Example: 190190
	ProviderSegmentationID string `json:"provider:segmentation_id,omitempty"`

	// qos policy id
	// Example: 6a8454ade84346f59e8d40665f878b2e
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	QosPolicyID string `json:"qos_policy_id,omitempty"`

	// revision number
	// Example: 1
	RevisionNumber int64 `json:"revision_number,omitempty"`

	// router external
	// Example: false
	RouterExternal bool `json:"router:external,omitempty"`

	// shared
	// Example: false
	Shared bool `json:"shared,omitempty"`

	// status
	// Example: ACTIVE
	// Enum: [ACTIVE DISABLE INACTIVE]
	Status string `json:"status,omitempty"`

	// subnets
	Subnets []string `json:"subnets"`

	// tenant id
	// Example: 4fd44f30292945e481c7b8a0c8908869
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	TenantID string `json:"tenant_id,omitempty"`

	// updated at
	// Example: 2016-03-08T20:19:41
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// vlan transparent
	// Example: false
	VlanTransparent bool `json:"vlan_transparent,omitempty"`
}

// Validate validates this network
func (m *Network) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProviderNetworkType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQosPolicyID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Network) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Network) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.Pattern("description", "body", m.Description, `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

func (m *Network) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.Pattern("id", "body", m.ID, `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

var networkTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["stable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networkTypeNamePropEnum = append(networkTypeNamePropEnum, v)
	}
}

const (

	// NetworkNameStable captures enum value "stable"
	NetworkNameStable string = "stable"
)

// prop value enum
func (m *Network) validateNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, networkTypeNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Network) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", m.Name, `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	// value enum
	if err := m.validateNameEnum("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Network) validateProjectID(formats strfmt.Registry) error {
	if swag.IsZero(m.ProjectID) { // not required
		return nil
	}

	if err := validate.Pattern("project_id", "body", m.ProjectID, `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

var networkTypeProviderNetworkTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["vlan","vxlan","gre","flat"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networkTypeProviderNetworkTypePropEnum = append(networkTypeProviderNetworkTypePropEnum, v)
	}
}

const (

	// NetworkProviderNetworkTypeVlan captures enum value "vlan"
	NetworkProviderNetworkTypeVlan string = "vlan"

	// NetworkProviderNetworkTypeVxlan captures enum value "vxlan"
	NetworkProviderNetworkTypeVxlan string = "vxlan"

	// NetworkProviderNetworkTypeGre captures enum value "gre"
	NetworkProviderNetworkTypeGre string = "gre"

	// NetworkProviderNetworkTypeFlat captures enum value "flat"
	NetworkProviderNetworkTypeFlat string = "flat"
)

// prop value enum
func (m *Network) validateProviderNetworkTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, networkTypeProviderNetworkTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Network) validateProviderNetworkType(formats strfmt.Registry) error {
	if swag.IsZero(m.ProviderNetworkType) { // not required
		return nil
	}

	// value enum
	if err := m.validateProviderNetworkTypeEnum("provider:network_type", "body", m.ProviderNetworkType); err != nil {
		return err
	}

	return nil
}

func (m *Network) validateQosPolicyID(formats strfmt.Registry) error {
	if swag.IsZero(m.QosPolicyID) { // not required
		return nil
	}

	if err := validate.Pattern("qos_policy_id", "body", m.QosPolicyID, `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

var networkTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ACTIVE","DISABLE","INACTIVE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networkTypeStatusPropEnum = append(networkTypeStatusPropEnum, v)
	}
}

const (

	// NetworkStatusACTIVE captures enum value "ACTIVE"
	NetworkStatusACTIVE string = "ACTIVE"

	// NetworkStatusDISABLE captures enum value "DISABLE"
	NetworkStatusDISABLE string = "DISABLE"

	// NetworkStatusINACTIVE captures enum value "INACTIVE"
	NetworkStatusINACTIVE string = "INACTIVE"
)

// prop value enum
func (m *Network) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, networkTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Network) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Network) validateSubnets(formats strfmt.Registry) error {
	if swag.IsZero(m.Subnets) { // not required
		return nil
	}

	for i := 0; i < len(m.Subnets); i++ {

		if err := validate.Pattern("subnets"+"."+strconv.Itoa(i), "body", m.Subnets[i], `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
			return err
		}

	}

	return nil
}

func (m *Network) validateTenantID(formats strfmt.Registry) error {
	if swag.IsZero(m.TenantID) { // not required
		return nil
	}

	if err := validate.Pattern("tenant_id", "body", m.TenantID, `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

func (m *Network) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this network based on context it is used
func (m *Network) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Network) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Network) UnmarshalBinary(b []byte) error {
	var res Network
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
