// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Image image
//
// swagger:model image
type Image struct {

	// checksum
	// Example: afab0f79bac770d61d24b4d0560b5f70
	Checksum string `json:"checksum,omitempty"`

	// container format
	// Example: bare
	// Enum: [bare]
	ContainerFormat string `json:"container_format,omitempty"`

	// created at
	// Example: 2016-03-08T20:19:41
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// disk format
	// Example: raw
	// Enum: [qcow2 raw iso]
	DiskFormat string `json:"disk_format,omitempty"`

	// file
	// Example: /v2/images/2b61ed2b-f800-4da0-99ff-396b742b8646/file
	File string `json:"file,omitempty"`

	// id
	// Example: d32019d3-bc6e-4319-9c1d-6722fc136a22
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	ID string `json:"id,omitempty"`

	// min disk
	// Example: 10
	MinDisk int32 `json:"min_disk,omitempty"`

	// min ram
	// Example: 512
	MinRAM int32 `json:"min_ram,omitempty"`

	// name
	// Example: ubuntu-1
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	// Enum: [stable]
	Name string `json:"name,omitempty"`

	// os hash algo
	// Example: sha512
	OsHashAlgo string `json:"os_hash_algo,omitempty"`

	// os hash value
	// Example: ea3e20140df1cc65f53d4c5b9ee3b38d0d6868f61bbe2230417b0f98cef0e0c7c37f0ebc5c6456fa47f013de48b452617d56c15fdba25e100379bd0e81ee15ec
	OsHashValue string `json:"os_hash_value,omitempty"`

	// os hidden
	// Example: false
	OsHidden bool `json:"os_hidden,omitempty"`

	// owner
	// Example: 5ef70662f8b34079a6eddb8da9d75fe8
	Owner string `json:"owner,omitempty"`

	// protected
	// Example: false
	Protected bool `json:"protected,omitempty"`

	// schema
	// Example: /v2/schemas/image
	Schema string `json:"schema,omitempty"`

	// self
	// Example: /v2/images/2b61ed2b-f800-4da0-99ff-396b742b8646
	Self string `json:"self,omitempty"`

	// size
	// Example: 476704768
	Size int64 `json:"size,omitempty"`

	// status
	// Example: active
	// Enum: [queued saving active killed deleted pending_delete deactivated uploading importing]
	Status string `json:"status,omitempty"`

	// tags
	Tags []string `json:"tags"`

	// updated at
	// Example: 2016-03-08T20:19:41
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// virtual size
	// Example: 100
	VirtualSize int64 `json:"virtual_size,omitempty"`

	// visibility
	// Example: public
	// Enum: [public community shared private]
	Visibility string `json:"visibility,omitempty"`
}

// Validate validates this image
func (m *Image) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContainerFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiskFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisibility(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var imageTypeContainerFormatPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["bare"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		imageTypeContainerFormatPropEnum = append(imageTypeContainerFormatPropEnum, v)
	}
}

const (

	// ImageContainerFormatBare captures enum value "bare"
	ImageContainerFormatBare string = "bare"
)

// prop value enum
func (m *Image) validateContainerFormatEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, imageTypeContainerFormatPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Image) validateContainerFormat(formats strfmt.Registry) error {
	if swag.IsZero(m.ContainerFormat) { // not required
		return nil
	}

	// value enum
	if err := m.validateContainerFormatEnum("container_format", "body", m.ContainerFormat); err != nil {
		return err
	}

	return nil
}

func (m *Image) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var imageTypeDiskFormatPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["qcow2","raw","iso"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		imageTypeDiskFormatPropEnum = append(imageTypeDiskFormatPropEnum, v)
	}
}

const (

	// ImageDiskFormatQcow2 captures enum value "qcow2"
	ImageDiskFormatQcow2 string = "qcow2"

	// ImageDiskFormatRaw captures enum value "raw"
	ImageDiskFormatRaw string = "raw"

	// ImageDiskFormatIso captures enum value "iso"
	ImageDiskFormatIso string = "iso"
)

// prop value enum
func (m *Image) validateDiskFormatEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, imageTypeDiskFormatPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Image) validateDiskFormat(formats strfmt.Registry) error {
	if swag.IsZero(m.DiskFormat) { // not required
		return nil
	}

	// value enum
	if err := m.validateDiskFormatEnum("disk_format", "body", m.DiskFormat); err != nil {
		return err
	}

	return nil
}

func (m *Image) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.Pattern("id", "body", m.ID, `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

var imageTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["stable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		imageTypeNamePropEnum = append(imageTypeNamePropEnum, v)
	}
}

const (

	// ImageNameStable captures enum value "stable"
	ImageNameStable string = "stable"
)

// prop value enum
func (m *Image) validateNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, imageTypeNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Image) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", m.Name, `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	// value enum
	if err := m.validateNameEnum("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var imageTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["queued","saving","active","killed","deleted","pending_delete","deactivated","uploading","importing"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		imageTypeStatusPropEnum = append(imageTypeStatusPropEnum, v)
	}
}

const (

	// ImageStatusQueued captures enum value "queued"
	ImageStatusQueued string = "queued"

	// ImageStatusSaving captures enum value "saving"
	ImageStatusSaving string = "saving"

	// ImageStatusActive captures enum value "active"
	ImageStatusActive string = "active"

	// ImageStatusKilled captures enum value "killed"
	ImageStatusKilled string = "killed"

	// ImageStatusDeleted captures enum value "deleted"
	ImageStatusDeleted string = "deleted"

	// ImageStatusPendingDelete captures enum value "pending_delete"
	ImageStatusPendingDelete string = "pending_delete"

	// ImageStatusDeactivated captures enum value "deactivated"
	ImageStatusDeactivated string = "deactivated"

	// ImageStatusUploading captures enum value "uploading"
	ImageStatusUploading string = "uploading"

	// ImageStatusImporting captures enum value "importing"
	ImageStatusImporting string = "importing"
)

// prop value enum
func (m *Image) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, imageTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Image) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Image) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var imageTypeVisibilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["public","community","shared","private"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		imageTypeVisibilityPropEnum = append(imageTypeVisibilityPropEnum, v)
	}
}

const (

	// ImageVisibilityPublic captures enum value "public"
	ImageVisibilityPublic string = "public"

	// ImageVisibilityCommunity captures enum value "community"
	ImageVisibilityCommunity string = "community"

	// ImageVisibilityShared captures enum value "shared"
	ImageVisibilityShared string = "shared"

	// ImageVisibilityPrivate captures enum value "private"
	ImageVisibilityPrivate string = "private"
)

// prop value enum
func (m *Image) validateVisibilityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, imageTypeVisibilityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Image) validateVisibility(formats strfmt.Registry) error {
	if swag.IsZero(m.Visibility) { // not required
		return nil
	}

	// value enum
	if err := m.validateVisibilityEnum("visibility", "body", m.Visibility); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this image based on context it is used
func (m *Image) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Image) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Image) UnmarshalBinary(b []byte) error {
	var res Image
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
