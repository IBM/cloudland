// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Member member
//
// swagger:model member
type Member struct {

	// created at
	// Example: 2016-03-08T20:19:41
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// image id
	// Example: d32019d3-bc6e-4319-9c1d-6722fc136a22
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	ImageID string `json:"image_id,omitempty"`

	// member id
	// Example: d32019d3-bc6e-4319-9c1d-6722fc136a22
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	MemberID string `json:"member_id,omitempty"`

	// schema
	// Example: /v2/schemas/image
	Schema string `json:"schema,omitempty"`

	// status
	// Example: active
	// Enum: [queued saving active killed deleted pending_delete deactivated uploading importing]
	Status string `json:"status,omitempty"`

	// updated at
	// Example: 2016-03-08T20:19:41
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`
}

// Validate validates this member
func (m *Member) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemberID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Member) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Member) validateImageID(formats strfmt.Registry) error {
	if swag.IsZero(m.ImageID) { // not required
		return nil
	}

	if err := validate.Pattern("image_id", "body", m.ImageID, `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

func (m *Member) validateMemberID(formats strfmt.Registry) error {
	if swag.IsZero(m.MemberID) { // not required
		return nil
	}

	if err := validate.Pattern("member_id", "body", m.MemberID, `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

var memberTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["queued","saving","active","killed","deleted","pending_delete","deactivated","uploading","importing"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		memberTypeStatusPropEnum = append(memberTypeStatusPropEnum, v)
	}
}

const (

	// MemberStatusQueued captures enum value "queued"
	MemberStatusQueued string = "queued"

	// MemberStatusSaving captures enum value "saving"
	MemberStatusSaving string = "saving"

	// MemberStatusActive captures enum value "active"
	MemberStatusActive string = "active"

	// MemberStatusKilled captures enum value "killed"
	MemberStatusKilled string = "killed"

	// MemberStatusDeleted captures enum value "deleted"
	MemberStatusDeleted string = "deleted"

	// MemberStatusPendingDelete captures enum value "pending_delete"
	MemberStatusPendingDelete string = "pending_delete"

	// MemberStatusDeactivated captures enum value "deactivated"
	MemberStatusDeactivated string = "deactivated"

	// MemberStatusUploading captures enum value "uploading"
	MemberStatusUploading string = "uploading"

	// MemberStatusImporting captures enum value "importing"
	MemberStatusImporting string = "importing"
)

// prop value enum
func (m *Member) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, memberTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Member) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Member) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this member based on context it is used
func (m *Member) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Member) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Member) UnmarshalBinary(b []byte) error {
	var res Member
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
