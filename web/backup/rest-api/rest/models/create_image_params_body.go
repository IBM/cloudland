// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateImageParamsBody create image params body
// swagger:model createImageParamsBody
type CreateImageParamsBody struct {

	// container format
	// Enum: [bare]
	ContainerFormat string `json:"container_format,omitempty"`

	// disk format
	// Enum: [qcow2 raw iso]
	DiskFormat string `json:"disk_format,omitempty"`

	// id
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	ID string `json:"id,omitempty"`

	// min disk
	MinDisk int32 `json:"min_disk,omitempty"`

	// min ram
	MinRAM int32 `json:"min_ram,omitempty"`

	// name
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	// Enum: [stable]
	Name string `json:"name,omitempty"`

	// protected
	Protected bool `json:"protected,omitempty"`

	// visibility
	// Enum: [public community shared private]
	Visibility string `json:"visibility,omitempty"`
}

// Validate validates this create image params body
func (m *CreateImageParamsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContainerFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiskFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisibility(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createImageParamsBodyTypeContainerFormatPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["bare"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createImageParamsBodyTypeContainerFormatPropEnum = append(createImageParamsBodyTypeContainerFormatPropEnum, v)
	}
}

const (

	// CreateImageParamsBodyContainerFormatBare captures enum value "bare"
	CreateImageParamsBodyContainerFormatBare string = "bare"
)

// prop value enum
func (m *CreateImageParamsBody) validateContainerFormatEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, createImageParamsBodyTypeContainerFormatPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CreateImageParamsBody) validateContainerFormat(formats strfmt.Registry) error {

	if swag.IsZero(m.ContainerFormat) { // not required
		return nil
	}

	// value enum
	if err := m.validateContainerFormatEnum("container_format", "body", m.ContainerFormat); err != nil {
		return err
	}

	return nil
}

var createImageParamsBodyTypeDiskFormatPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["qcow2","raw","iso"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createImageParamsBodyTypeDiskFormatPropEnum = append(createImageParamsBodyTypeDiskFormatPropEnum, v)
	}
}

const (

	// CreateImageParamsBodyDiskFormatQcow2 captures enum value "qcow2"
	CreateImageParamsBodyDiskFormatQcow2 string = "qcow2"

	// CreateImageParamsBodyDiskFormatRaw captures enum value "raw"
	CreateImageParamsBodyDiskFormatRaw string = "raw"

	// CreateImageParamsBodyDiskFormatIso captures enum value "iso"
	CreateImageParamsBodyDiskFormatIso string = "iso"
)

// prop value enum
func (m *CreateImageParamsBody) validateDiskFormatEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, createImageParamsBodyTypeDiskFormatPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CreateImageParamsBody) validateDiskFormat(formats strfmt.Registry) error {

	if swag.IsZero(m.DiskFormat) { // not required
		return nil
	}

	// value enum
	if err := m.validateDiskFormatEnum("disk_format", "body", m.DiskFormat); err != nil {
		return err
	}

	return nil
}

func (m *CreateImageParamsBody) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.Pattern("id", "body", string(m.ID), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

var createImageParamsBodyTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["stable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createImageParamsBodyTypeNamePropEnum = append(createImageParamsBodyTypeNamePropEnum, v)
	}
}

const (

	// CreateImageParamsBodyNameStable captures enum value "stable"
	CreateImageParamsBodyNameStable string = "stable"
)

// prop value enum
func (m *CreateImageParamsBody) validateNameEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, createImageParamsBodyTypeNamePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CreateImageParamsBody) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", string(m.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	// value enum
	if err := m.validateNameEnum("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var createImageParamsBodyTypeVisibilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["public","community","shared","private"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createImageParamsBodyTypeVisibilityPropEnum = append(createImageParamsBodyTypeVisibilityPropEnum, v)
	}
}

const (

	// CreateImageParamsBodyVisibilityPublic captures enum value "public"
	CreateImageParamsBodyVisibilityPublic string = "public"

	// CreateImageParamsBodyVisibilityCommunity captures enum value "community"
	CreateImageParamsBodyVisibilityCommunity string = "community"

	// CreateImageParamsBodyVisibilityShared captures enum value "shared"
	CreateImageParamsBodyVisibilityShared string = "shared"

	// CreateImageParamsBodyVisibilityPrivate captures enum value "private"
	CreateImageParamsBodyVisibilityPrivate string = "private"
)

// prop value enum
func (m *CreateImageParamsBody) validateVisibilityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, createImageParamsBodyTypeVisibilityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CreateImageParamsBody) validateVisibility(formats strfmt.Registry) error {

	if swag.IsZero(m.Visibility) { // not required
		return nil
	}

	// value enum
	if err := m.validateVisibilityEnum("visibility", "body", m.Visibility); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateImageParamsBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateImageParamsBody) UnmarshalBinary(b []byte) error {
	var res CreateImageParamsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
