# -*- mode: sh -*-
localrc="${BASH_SOURCE[0]}.local"
source "$localrc"
guest_userid_template=ZCC%05X
run_dir=/opt/cloudland/run
cache_dir=/opt/cloudland/cache
cache_tmp_dir=$cache_dir/tmp
backup_dir=$cache_dir/backup
volume_dir=/opt/cloudland/cache/volume
image_dir=$cache_dir/instance
image_cache=$cache_dir/image
xml_dir=/opt/cloudland/cache/xml
template_dir=/opt/cloudland/scripts/xml
container_dir=/var/lib/lxd/containers
dmasq_dir=/opt/cloudland/cache/dnsmasq
mudata_dir=/opt/cloudland/mudata
snapshot_dir=/var/snapshot
deploy_dir=/opt/cloudland/deploy
vxlan_db=/opt/cloudland/db/cloudland.db
cland_private_key=$deploy_dir/.ssh/cland.key
export JAEGER_SERVICE_NAME="SCI-Backend"
span=$(basename $0 .sh)
function die()
{
    echo $1
    exit -1
}

function inet_aton()
{
    ip="$1"
    hex=`printf '%02x' ${ip//./ }`
    printf "%lu\n" "0x${hex}"
}

function inet_ntoa()
{
    num="$1"
    hex=`printf "%08x\n" ${num}`
    for i in `echo ${hex} | sed "s/\(..\)/\1 /g"`; do
        printf '%hu.' "0x${i}"
    done | sed "s/\.$//g"
}

function get_tunip()
{
	tunip=$(ifconfig $vxlan_interface | grep 'inet addr' | cut -d: -f2 | cut -d' ' -f1)
	echo "tunip=$tunip" >> $localrc
}

function apply_fw()
{
    action=$1
    chain=$2
    shift
    shift
    rule=$*
    if [ "$action" = '-I' -o "$action" = '-A' ]; then
        iptables -D $chain $rule 2>/dev/null
    elif [ "$action" = '-N' ]; then
        iptables -S $chain || iptables -N $chain
    fi
    iptables $action $chain $rule
}

function apply_vnic()
{
    action=$1
    vnic=$2
    apply_fw $action FORWARD -m physdev --physdev-in $vnic --physdev-is-bridged -j ACCEPT
    apply_fw $action FORWARD -m physdev --physdev-out $vnic --physdev-is-bridged -j ACCEPT
    service iptables save
}

function apply_bridge()
{
    action=$1
    mybr=$2
    apply_fw $action FORWARD -i $mybr -o $mybr -j ACCEPT
    service iptables save
}

function sidecar()
{
    [ -x /usr/local/bin/sidecar ] && /usr/local/bin/sidecar $@
}

function end_span()
{
    sidecar span finish $span
}

function sync_target()
{
    target=$1
    node=$2
    cd $deploy_dir
    group=hyper
    if [ -n "$node" ]; then
        group=$(cat hosts/hosts | grep client_id=$node | awk '{print $1}')
    fi
    ansible $group -u cland -b -a "chown -R cland.cland $target"
    ansible $group -u cland -m synchronize -a "src=$target dest=$target"
    cd -
}

function copy_target()
{
    target=$1
    node=$2
    cd $deploy_dir
    [ -n "$node" ] && hyper_node=$(cat hosts/hosts | grep client_id=$node | awk '{print $1}')
    scp -i $cland_private_key -o StrictHostKeyChecking=no -r ${target} cland@${hyper_node}:${target}
    cd -
}

function action_target()
{
    node=$1
    command=$2
    cd $deploy_dir
    [ -n "$node" ] && hyper_node=$(cat hosts/hosts | grep client_id=$node | awk '{print $1}')
    ssh -i $cland_private_key -o StrictHostKeyChecking=no cland@$hyper_node "$command"
    cd -
}

function sql_exec()
{
    sqlite3 $vxlan_db "$*"
}

if [ "$span" != "report_rc" ]; then
    sidecar span start $span
    trap end_span EXIT
fi

