// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: remotexec.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_remotexec_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_remotexec_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_remotexec_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_remotexec_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_remotexec_2eproto;
namespace com {
namespace ibm {
namespace cloudland {
namespace scripts {
class ExecuteReply;
class ExecuteReplyDefaultTypeInternal;
extern ExecuteReplyDefaultTypeInternal _ExecuteReply_default_instance_;
class ExecuteRequest;
class ExecuteRequestDefaultTypeInternal;
extern ExecuteRequestDefaultTypeInternal _ExecuteRequest_default_instance_;
class FileChunk;
class FileChunkDefaultTypeInternal;
extern FileChunkDefaultTypeInternal _FileChunk_default_instance_;
class TransmitAck;
class TransmitAckDefaultTypeInternal;
extern TransmitAckDefaultTypeInternal _TransmitAck_default_instance_;
}  // namespace scripts
}  // namespace cloudland
}  // namespace ibm
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::ibm::cloudland::scripts::ExecuteReply* Arena::CreateMaybeMessage<::com::ibm::cloudland::scripts::ExecuteReply>(Arena*);
template<> ::com::ibm::cloudland::scripts::ExecuteRequest* Arena::CreateMaybeMessage<::com::ibm::cloudland::scripts::ExecuteRequest>(Arena*);
template<> ::com::ibm::cloudland::scripts::FileChunk* Arena::CreateMaybeMessage<::com::ibm::cloudland::scripts::FileChunk>(Arena*);
template<> ::com::ibm::cloudland::scripts::TransmitAck* Arena::CreateMaybeMessage<::com::ibm::cloudland::scripts::TransmitAck>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace ibm {
namespace cloudland {
namespace scripts {

// ===================================================================

class ExecuteRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.ibm.cloudland.scripts.ExecuteRequest) */ {
 public:
  ExecuteRequest();
  virtual ~ExecuteRequest();

  ExecuteRequest(const ExecuteRequest& from);
  ExecuteRequest(ExecuteRequest&& from) noexcept
    : ExecuteRequest() {
    *this = ::std::move(from);
  }

  inline ExecuteRequest& operator=(const ExecuteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecuteRequest& operator=(ExecuteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecuteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecuteRequest* internal_default_instance() {
    return reinterpret_cast<const ExecuteRequest*>(
               &_ExecuteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ExecuteRequest* other);
  friend void swap(ExecuteRequest& a, ExecuteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecuteRequest* New() const final {
    return CreateMaybeMessage<ExecuteRequest>(nullptr);
  }

  ExecuteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecuteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecuteRequest& from);
  void MergeFrom(const ExecuteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.ibm.cloudland.scripts.ExecuteRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remotexec_2eproto);
    return ::descriptor_table_remotexec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string control = 2;
  void clear_control();
  static const int kControlFieldNumber = 2;
  const std::string& control() const;
  void set_control(const std::string& value);
  void set_control(std::string&& value);
  void set_control(const char* value);
  void set_control(const char* value, size_t size);
  std::string* mutable_control();
  std::string* release_control();
  void set_allocated_control(std::string* control);

  // string command = 3;
  void clear_command();
  static const int kCommandFieldNumber = 3;
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 extra = 4;
  void clear_extra();
  static const int kExtraFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 extra() const;
  void set_extra(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.ibm.cloudland.scripts.ExecuteRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr control_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 extra_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remotexec_2eproto;
};
// -------------------------------------------------------------------

class ExecuteReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.ibm.cloudland.scripts.ExecuteReply) */ {
 public:
  ExecuteReply();
  virtual ~ExecuteReply();

  ExecuteReply(const ExecuteReply& from);
  ExecuteReply(ExecuteReply&& from) noexcept
    : ExecuteReply() {
    *this = ::std::move(from);
  }

  inline ExecuteReply& operator=(const ExecuteReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecuteReply& operator=(ExecuteReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecuteReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecuteReply* internal_default_instance() {
    return reinterpret_cast<const ExecuteReply*>(
               &_ExecuteReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ExecuteReply* other);
  friend void swap(ExecuteReply& a, ExecuteReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecuteReply* New() const final {
    return CreateMaybeMessage<ExecuteReply>(nullptr);
  }

  ExecuteReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecuteReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecuteReply& from);
  void MergeFrom(const ExecuteReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.ibm.cloudland.scripts.ExecuteReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remotexec_2eproto);
    return ::descriptor_table_remotexec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);

  // @@protoc_insertion_point(class_scope:com.ibm.cloudland.scripts.ExecuteReply)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remotexec_2eproto;
};
// -------------------------------------------------------------------

class FileChunk :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.ibm.cloudland.scripts.FileChunk) */ {
 public:
  FileChunk();
  virtual ~FileChunk();

  FileChunk(const FileChunk& from);
  FileChunk(FileChunk&& from) noexcept
    : FileChunk() {
    *this = ::std::move(from);
  }

  inline FileChunk& operator=(const FileChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileChunk& operator=(FileChunk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileChunk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileChunk* internal_default_instance() {
    return reinterpret_cast<const FileChunk*>(
               &_FileChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(FileChunk* other);
  friend void swap(FileChunk& a, FileChunk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileChunk* New() const final {
    return CreateMaybeMessage<FileChunk>(nullptr);
  }

  FileChunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileChunk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileChunk& from);
  void MergeFrom(const FileChunk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileChunk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.ibm.cloudland.scripts.FileChunk";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remotexec_2eproto);
    return ::descriptor_table_remotexec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string control = 2;
  void clear_control();
  static const int kControlFieldNumber = 2;
  const std::string& control() const;
  void set_control(const std::string& value);
  void set_control(std::string&& value);
  void set_control(const char* value);
  void set_control(const char* value, size_t size);
  std::string* mutable_control();
  std::string* release_control();
  void set_allocated_control(std::string* control);

  // string filepath = 3;
  void clear_filepath();
  static const int kFilepathFieldNumber = 3;
  const std::string& filepath() const;
  void set_filepath(const std::string& value);
  void set_filepath(std::string&& value);
  void set_filepath(const char* value);
  void set_filepath(const char* value, size_t size);
  std::string* mutable_filepath();
  std::string* release_filepath();
  void set_allocated_filepath(std::string* filepath);

  // bytes content = 7;
  void clear_content();
  static const int kContentFieldNumber = 7;
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 filesize = 4;
  void clear_filesize();
  static const int kFilesizeFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 filesize() const;
  void set_filesize(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 fileseek = 6;
  void clear_fileseek();
  static const int kFileseekFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int64 fileseek() const;
  void set_fileseek(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 checksum = 5;
  void clear_checksum();
  static const int kChecksumFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 checksum() const;
  void set_checksum(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 extra = 8;
  void clear_extra();
  static const int kExtraFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int32 extra() const;
  void set_extra(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.ibm.cloudland.scripts.FileChunk)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr control_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filepath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 filesize_;
  ::PROTOBUF_NAMESPACE_ID::int64 fileseek_;
  ::PROTOBUF_NAMESPACE_ID::int32 checksum_;
  ::PROTOBUF_NAMESPACE_ID::int32 extra_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remotexec_2eproto;
};
// -------------------------------------------------------------------

class TransmitAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.ibm.cloudland.scripts.TransmitAck) */ {
 public:
  TransmitAck();
  virtual ~TransmitAck();

  TransmitAck(const TransmitAck& from);
  TransmitAck(TransmitAck&& from) noexcept
    : TransmitAck() {
    *this = ::std::move(from);
  }

  inline TransmitAck& operator=(const TransmitAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransmitAck& operator=(TransmitAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransmitAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransmitAck* internal_default_instance() {
    return reinterpret_cast<const TransmitAck*>(
               &_TransmitAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TransmitAck* other);
  friend void swap(TransmitAck& a, TransmitAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransmitAck* New() const final {
    return CreateMaybeMessage<TransmitAck>(nullptr);
  }

  TransmitAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransmitAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransmitAck& from);
  void MergeFrom(const TransmitAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransmitAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.ibm.cloudland.scripts.TransmitAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remotexec_2eproto);
    return ::descriptor_table_remotexec_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);

  // @@protoc_insertion_point(class_scope:com.ibm.cloudland.scripts.TransmitAck)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remotexec_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ExecuteRequest

// int32 id = 1;
inline void ExecuteRequest::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExecuteRequest::id() const {
  // @@protoc_insertion_point(field_get:com.ibm.cloudland.scripts.ExecuteRequest.id)
  return id_;
}
inline void ExecuteRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:com.ibm.cloudland.scripts.ExecuteRequest.id)
}

// string control = 2;
inline void ExecuteRequest::clear_control() {
  control_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ExecuteRequest::control() const {
  // @@protoc_insertion_point(field_get:com.ibm.cloudland.scripts.ExecuteRequest.control)
  return control_.GetNoArena();
}
inline void ExecuteRequest::set_control(const std::string& value) {
  
  control_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.ibm.cloudland.scripts.ExecuteRequest.control)
}
inline void ExecuteRequest::set_control(std::string&& value) {
  
  control_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.ibm.cloudland.scripts.ExecuteRequest.control)
}
inline void ExecuteRequest::set_control(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  control_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.ibm.cloudland.scripts.ExecuteRequest.control)
}
inline void ExecuteRequest::set_control(const char* value, size_t size) {
  
  control_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.ibm.cloudland.scripts.ExecuteRequest.control)
}
inline std::string* ExecuteRequest::mutable_control() {
  
  // @@protoc_insertion_point(field_mutable:com.ibm.cloudland.scripts.ExecuteRequest.control)
  return control_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExecuteRequest::release_control() {
  // @@protoc_insertion_point(field_release:com.ibm.cloudland.scripts.ExecuteRequest.control)
  
  return control_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExecuteRequest::set_allocated_control(std::string* control) {
  if (control != nullptr) {
    
  } else {
    
  }
  control_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), control);
  // @@protoc_insertion_point(field_set_allocated:com.ibm.cloudland.scripts.ExecuteRequest.control)
}

// string command = 3;
inline void ExecuteRequest::clear_command() {
  command_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ExecuteRequest::command() const {
  // @@protoc_insertion_point(field_get:com.ibm.cloudland.scripts.ExecuteRequest.command)
  return command_.GetNoArena();
}
inline void ExecuteRequest::set_command(const std::string& value) {
  
  command_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.ibm.cloudland.scripts.ExecuteRequest.command)
}
inline void ExecuteRequest::set_command(std::string&& value) {
  
  command_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.ibm.cloudland.scripts.ExecuteRequest.command)
}
inline void ExecuteRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.ibm.cloudland.scripts.ExecuteRequest.command)
}
inline void ExecuteRequest::set_command(const char* value, size_t size) {
  
  command_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.ibm.cloudland.scripts.ExecuteRequest.command)
}
inline std::string* ExecuteRequest::mutable_command() {
  
  // @@protoc_insertion_point(field_mutable:com.ibm.cloudland.scripts.ExecuteRequest.command)
  return command_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExecuteRequest::release_command() {
  // @@protoc_insertion_point(field_release:com.ibm.cloudland.scripts.ExecuteRequest.command)
  
  return command_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExecuteRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command);
  // @@protoc_insertion_point(field_set_allocated:com.ibm.cloudland.scripts.ExecuteRequest.command)
}

// int32 extra = 4;
inline void ExecuteRequest::clear_extra() {
  extra_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExecuteRequest::extra() const {
  // @@protoc_insertion_point(field_get:com.ibm.cloudland.scripts.ExecuteRequest.extra)
  return extra_;
}
inline void ExecuteRequest::set_extra(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  extra_ = value;
  // @@protoc_insertion_point(field_set:com.ibm.cloudland.scripts.ExecuteRequest.extra)
}

// -------------------------------------------------------------------

// ExecuteReply

// string status = 1;
inline void ExecuteReply::clear_status() {
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ExecuteReply::status() const {
  // @@protoc_insertion_point(field_get:com.ibm.cloudland.scripts.ExecuteReply.status)
  return status_.GetNoArena();
}
inline void ExecuteReply::set_status(const std::string& value) {
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.ibm.cloudland.scripts.ExecuteReply.status)
}
inline void ExecuteReply::set_status(std::string&& value) {
  
  status_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.ibm.cloudland.scripts.ExecuteReply.status)
}
inline void ExecuteReply::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.ibm.cloudland.scripts.ExecuteReply.status)
}
inline void ExecuteReply::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.ibm.cloudland.scripts.ExecuteReply.status)
}
inline std::string* ExecuteReply::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:com.ibm.cloudland.scripts.ExecuteReply.status)
  return status_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExecuteReply::release_status() {
  // @@protoc_insertion_point(field_release:com.ibm.cloudland.scripts.ExecuteReply.status)
  
  return status_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExecuteReply::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:com.ibm.cloudland.scripts.ExecuteReply.status)
}

// -------------------------------------------------------------------

// FileChunk

// int32 id = 1;
inline void FileChunk::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FileChunk::id() const {
  // @@protoc_insertion_point(field_get:com.ibm.cloudland.scripts.FileChunk.id)
  return id_;
}
inline void FileChunk::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:com.ibm.cloudland.scripts.FileChunk.id)
}

// string control = 2;
inline void FileChunk::clear_control() {
  control_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FileChunk::control() const {
  // @@protoc_insertion_point(field_get:com.ibm.cloudland.scripts.FileChunk.control)
  return control_.GetNoArena();
}
inline void FileChunk::set_control(const std::string& value) {
  
  control_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.ibm.cloudland.scripts.FileChunk.control)
}
inline void FileChunk::set_control(std::string&& value) {
  
  control_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.ibm.cloudland.scripts.FileChunk.control)
}
inline void FileChunk::set_control(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  control_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.ibm.cloudland.scripts.FileChunk.control)
}
inline void FileChunk::set_control(const char* value, size_t size) {
  
  control_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.ibm.cloudland.scripts.FileChunk.control)
}
inline std::string* FileChunk::mutable_control() {
  
  // @@protoc_insertion_point(field_mutable:com.ibm.cloudland.scripts.FileChunk.control)
  return control_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileChunk::release_control() {
  // @@protoc_insertion_point(field_release:com.ibm.cloudland.scripts.FileChunk.control)
  
  return control_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileChunk::set_allocated_control(std::string* control) {
  if (control != nullptr) {
    
  } else {
    
  }
  control_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), control);
  // @@protoc_insertion_point(field_set_allocated:com.ibm.cloudland.scripts.FileChunk.control)
}

// string filepath = 3;
inline void FileChunk::clear_filepath() {
  filepath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FileChunk::filepath() const {
  // @@protoc_insertion_point(field_get:com.ibm.cloudland.scripts.FileChunk.filepath)
  return filepath_.GetNoArena();
}
inline void FileChunk::set_filepath(const std::string& value) {
  
  filepath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.ibm.cloudland.scripts.FileChunk.filepath)
}
inline void FileChunk::set_filepath(std::string&& value) {
  
  filepath_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.ibm.cloudland.scripts.FileChunk.filepath)
}
inline void FileChunk::set_filepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filepath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.ibm.cloudland.scripts.FileChunk.filepath)
}
inline void FileChunk::set_filepath(const char* value, size_t size) {
  
  filepath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.ibm.cloudland.scripts.FileChunk.filepath)
}
inline std::string* FileChunk::mutable_filepath() {
  
  // @@protoc_insertion_point(field_mutable:com.ibm.cloudland.scripts.FileChunk.filepath)
  return filepath_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileChunk::release_filepath() {
  // @@protoc_insertion_point(field_release:com.ibm.cloudland.scripts.FileChunk.filepath)
  
  return filepath_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileChunk::set_allocated_filepath(std::string* filepath) {
  if (filepath != nullptr) {
    
  } else {
    
  }
  filepath_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filepath);
  // @@protoc_insertion_point(field_set_allocated:com.ibm.cloudland.scripts.FileChunk.filepath)
}

// int32 filesize = 4;
inline void FileChunk::clear_filesize() {
  filesize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FileChunk::filesize() const {
  // @@protoc_insertion_point(field_get:com.ibm.cloudland.scripts.FileChunk.filesize)
  return filesize_;
}
inline void FileChunk::set_filesize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  filesize_ = value;
  // @@protoc_insertion_point(field_set:com.ibm.cloudland.scripts.FileChunk.filesize)
}

// int32 checksum = 5;
inline void FileChunk::clear_checksum() {
  checksum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FileChunk::checksum() const {
  // @@protoc_insertion_point(field_get:com.ibm.cloudland.scripts.FileChunk.checksum)
  return checksum_;
}
inline void FileChunk::set_checksum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  checksum_ = value;
  // @@protoc_insertion_point(field_set:com.ibm.cloudland.scripts.FileChunk.checksum)
}

// int64 fileseek = 6;
inline void FileChunk::clear_fileseek() {
  fileseek_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FileChunk::fileseek() const {
  // @@protoc_insertion_point(field_get:com.ibm.cloudland.scripts.FileChunk.fileseek)
  return fileseek_;
}
inline void FileChunk::set_fileseek(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  fileseek_ = value;
  // @@protoc_insertion_point(field_set:com.ibm.cloudland.scripts.FileChunk.fileseek)
}

// bytes content = 7;
inline void FileChunk::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FileChunk::content() const {
  // @@protoc_insertion_point(field_get:com.ibm.cloudland.scripts.FileChunk.content)
  return content_.GetNoArena();
}
inline void FileChunk::set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.ibm.cloudland.scripts.FileChunk.content)
}
inline void FileChunk::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.ibm.cloudland.scripts.FileChunk.content)
}
inline void FileChunk::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.ibm.cloudland.scripts.FileChunk.content)
}
inline void FileChunk::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.ibm.cloudland.scripts.FileChunk.content)
}
inline std::string* FileChunk::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:com.ibm.cloudland.scripts.FileChunk.content)
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileChunk::release_content() {
  // @@protoc_insertion_point(field_release:com.ibm.cloudland.scripts.FileChunk.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileChunk::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:com.ibm.cloudland.scripts.FileChunk.content)
}

// int32 extra = 8;
inline void FileChunk::clear_extra() {
  extra_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FileChunk::extra() const {
  // @@protoc_insertion_point(field_get:com.ibm.cloudland.scripts.FileChunk.extra)
  return extra_;
}
inline void FileChunk::set_extra(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  extra_ = value;
  // @@protoc_insertion_point(field_set:com.ibm.cloudland.scripts.FileChunk.extra)
}

// -------------------------------------------------------------------

// TransmitAck

// string status = 1;
inline void TransmitAck::clear_status() {
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransmitAck::status() const {
  // @@protoc_insertion_point(field_get:com.ibm.cloudland.scripts.TransmitAck.status)
  return status_.GetNoArena();
}
inline void TransmitAck::set_status(const std::string& value) {
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.ibm.cloudland.scripts.TransmitAck.status)
}
inline void TransmitAck::set_status(std::string&& value) {
  
  status_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.ibm.cloudland.scripts.TransmitAck.status)
}
inline void TransmitAck::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.ibm.cloudland.scripts.TransmitAck.status)
}
inline void TransmitAck::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.ibm.cloudland.scripts.TransmitAck.status)
}
inline std::string* TransmitAck::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:com.ibm.cloudland.scripts.TransmitAck.status)
  return status_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransmitAck::release_status() {
  // @@protoc_insertion_point(field_release:com.ibm.cloudland.scripts.TransmitAck.status)
  
  return status_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransmitAck::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:com.ibm.cloudland.scripts.TransmitAck.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace scripts
}  // namespace cloudland
}  // namespace ibm
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_remotexec_2eproto
